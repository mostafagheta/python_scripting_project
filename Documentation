Python System Monitor — Full Documentation

Project summary

A lightweight, modular system monitor (Linux-first) written in Python with a CustomTkinter GUI. It gathers CPU, GPU, memory, temperature, voltage and power, network, and motherboard information via small probe modules under `modules/` and shows them in a monospace, colorized GUI.

Repository entrypoints
- `main.py` — GUI application (CustomTkinter + tk.Text). Calls modules and formats output.
- `modules/` — probe modules (each returns plain Python dicts/lists).

Quick start (run locally)

1. Create and activate virtualenv:

```bash
python3 -m venv .venv
source .venv/bin/activate
```

2. Install Python deps:

```bash
python -m pip install --upgrade pip
pip install -r requirements.txt
```

3. (Linux) Install system helpers for better sensor coverage:

```bash
sudo apt install lm-sensors python3-tk
sudo sensors-detect    # then follow prompts (may require reboot)
```

4. Run GUI:

```bash
python3 main.py
```

Runtime requirements and system dependencies

Python packages (from `requirements.txt`)
- `customtkinter` — modern styled Tkinter widgets and themes used by `main.py` GUI.
- `psutil` — system metrics: memory, CPU usage, processes.
- `py-cpuinfo` — CPU model and features.
- `GPUtil` — optional GPU detection helpers.
- `nvidia-ml-py3` — optional NVIDIA NVML binding (if using `nvidia-smi` style queries in Python).

System-level tools (best-effort, optional but recommended)
- `lm-sensors` (`sensors`, `sensors-detect`) — exposes hwmon sensors (temperatures, voltages, power) via kernel drivers.
- `nvidia-smi` — preferred NVIDIA GPU metrics (power.draw, temp, memory).
- `dmidecode`, `lshw` — hardware inventory (DIMM type/frequency, BIOS, motherboard). `dmidecode` often requires root (or NOPASSWD sudo).
- `lspci` — PCI device listing for GPU/vendor detection.

Permissions
- `dmidecode` may need sudo; the app handles absence and shows helpful notes instead of crashing.
- Reading `/sys/class/hwmon` is generally permitted; some vendor nodes may require elevated permissions.

Project structure and responsibilities

Top-level
- `main.py` — CTk application
  - Left navigation with buttons for each module view.
  - `write_output()` renders dicts/lists in the text area with color tags.
  - Button handlers call module functions and display concise summaries or detailed dumps.
  - Remote Monitor now shows a small dialog to input Hostname/IP/User and calls `modules.remote_monitor.query_remote()`.

Modules (path `modules/`)
Each module uses a best-effort approach: prefer vendor tools, fallback to sysfs and generic utilities. Return values are plain Python data structures (dicts/lists) for easy rendering.

- `modules/cpu_info.py`
  - get_cpu_info() -> dict
    - keys: `model` (str), `cores` (int), `threads` (int), `frequency` (MHz float or dict), other CPU features.
  - Uses `py-cpuinfo` and `psutil`.

- `modules/memory_info.py`
  - get_memory_info() -> dict
    - keys: `total_gb` (float), optionally `type`, `frequency`, `channel`, `per_module` details if `dmidecode` or `lshw` available.
  - Uses `psutil` for totals; `dmidecode`/`lshw` for DIMM-specific fields (may require sudo).

- `modules/gpu_info.py`
  - get_gpu_info() -> list[dict] or dict
    - Example per GPU: { "index": 0, "name": "GeForce ...", "vendor": "NVIDIA", "memory_total_mb": 8192, "temperature": 56.0 }
  - Strategy: prefer `nvidia-smi` (or NVML), else `lspci` + hwmon mapping.

- `modules/temp_info.py`
  - get_temperatures() -> dict
    - returns detailed structured temps across categories (cpu, gpu, hwmon, thermal zones).
  - get_all_hwmon_sensors() -> list[dict]
    - enumerates `/sys/class/hwmon` entries and normalized numeric sensors (label/file/value).
  - get_quick_summary() -> dict
    - compact 4-key mapping: "CPU Temperature (°C)", "GPU Temperature (°C)", "RAM Temperature (°C)", "VRM Temperature (°C)".
  - Implementation notes: reads `/sys/class/thermal`, `/sys/class/hwmon`, `sensors` command, and `gpu_info` as fallback.

- `modules/volt_info.py`
  - get_voltages() -> dict
    - keys often: `cpu`, `gpu`, `memory`, `motherboard`, `other`, `hwmon`, `sensors`
    - hwmon voltage entries: { "sensor": "BAT0", "label": "in0_input", "voltage": 16.4, "file": "in0_input" }
  - get_power() -> dict
    - keys: `cpu`, `gpu`, `system`, `hwmon`, `rapl`, `total`
    - RAPL entries are now returned as cumulative energy (`energy_j`) and `power` is `None` unless sampling is used.
  - get_power_info() -> { "voltages": ..., "power": ... }
  - GUI helpers added:
    - `get_voltages_display()` -> Dict[str,list[str]] — human-readable lines grouped by category.
    - `get_power_display()` -> Dict[str,list[str]] — human-readable power lines (watts or cumulative energy).
    - `get_volt_power_panel()` -> list[str] — multi-line panel with bullets (used earlier).
    - `get_volt_power_summary()` -> list[str] — compact two-line summary suitable for the GUI: `["Voltages: ...", "Power: ..."]`.
  - RAPL handling: module reads `/sys/class/powercap/intel-rapl/*/energy_uj`. These are cumulative energy counters and must be sampled across time to compute instantaneous power (W). The module intentionally returns `energy_j` and `power: None` to avoid misreporting.

- `modules/network.py`
  - get_network_rates() -> dict
    - per-interface bytes/packets rates; uses `psutil.net_io_counters(pernic=True)`.

- `modules/os_info.py`
  - get_os_info() -> dict
    - OS name, kernel, uptime, platform details from `platform` and `psutil`.

- `modules/motherboard_info.py`
  - get_motherboard_info() -> dict
    - manufacturer, product, BIOS version, optional chipset info from `/sys/class/dmi` or `dmidecode` fallback.

- `modules/remote_monitor.py`
  - query_remote(host, user, ip=None) -> dict
    - placeholder that returns: `{'note': 'Remote monitoring placeholder for <host> as <user> (IP: <ip>)'}`.
  - GUI integration: `main.py` shows a small CTk dialog to let user enter Hostname/IP/User; result printed in main panel.

- `modules/stress_test.py`
  - run_stress_test(seconds) — quick CPU-bound/IO-bound stress tasks for demo.

Public function return shapes (summary)
- Voltages:
  - `get_voltages()` -> dict: categories -> list of {sensor,label,voltage,file,raw}
- Power:
  - `get_power()` -> dict: keys `cpu,gpu,hwmon,rapl,system,total` where rapl entries are {name, energy_j (float), power: None, note}
- Temperatures:
  - `get_quick_summary()` -> { "CPU Temperature (°C)": float, "GPU Temperature (°C)": float, ... }
  - `get_all_hwmon_sensors()` -> [{sensor,label,file,value}, ...]
- GUI helpers:
  - `get_volt_power_summary()` -> list[str] (2 lines: Voltages:, Power:)

GUI behavior (how data is displayed)
- `main.py.write_output()`:
  - Accepts dict, list, or JSON string, and renders with color tags:
    - 'key' (white) for keys, 'good' (green) for values, 'neutral' for missing.
  - Calls `pprint.pformat()` for dict/list pretty dumps.
- Voltages & Power button:
  - Now calls `volt_info.get_volt_power_summary()` and displays the two-line compact summary in the main text area.
- Remote Monitor:
  - Pops a small dialog (Hostname, IP, User) and prints `modules.remote_monitor.query_remote()` output.

How to extend or change display behavior
- To show full volt/power detail: change `main.py` `show_volt_power()` to call `get_volt_power_panel()` or `get_voltages()`/`get_power()` and pass dict output to `write_output`.
- To compute instantaneous RAPL power:
  - Implement a sampler:
    - read `energy_uj` at t0, wait dt (e.g., 1s), read again at t1, delta_energy_j = (e1 - e0)/1_000_000 -> J, power_w = delta_energy_j / dt.
  - Either:
    - provide a blocking helper `sample_rapl_power(interval=1.0)` (suitable for quick on-demand call), or
    - spawn a background thread that updates a cached power reading that GUI polls periodically (non-blocking, recommended).

Troubleshooting & common issues

1. Many `None` values in GUI:
   - Means the kernel/hardware/utility didn't expose that sensor on this machine. Use `modules.temp_info.get_all_hwmon_sensors()` to inspect raw hwmon. Install `lm-sensors` or kernel modules suggested by `sensors-detect`.

2. `dmidecode` fields missing:
   - `dmidecode` normally requires root — either run the app as root (not recommended) or add a command-specific sudoers entry (e.g., `youruser ALL=(root) NOPASSWD: /usr/sbin/dmidecode`) — be careful with sudoers edits.

3. GPU values missing or inaccurate:
   - Ensure `nvidia-smi` is available and drivers installed for NVIDIA cards. For AMD, add `rocm-smi` or parse hwmon labels when available.

4. RAPL produces very large numbers:
   - Older code wrongly treated cumulative energy as instantaneous watts. Current code returns `energy_j` and `power=None`. To get watts, sample energy over time (see extension notes).

Example diagnostic commands
Run these from the project root (with .venv active) to gather debug output:
```bash
python3 - <<'PY'
import json
import modules.temp_info as t
import modules.volt_info as v
print('hwmon sensors:')
print(json.dumps(t.get_all_hwmon_sensors(), indent=2))
print('quick temps:')
print(json.dumps(t.get_quick_summary(), indent=2))
print('voltages:')
print(json.dumps(v.get_voltages(), indent=2))
print('power:')
print(json.dumps(v.get_power(), indent=2))
print('compact summary:')
print('\n'.join(v.get_volt_power_summary()))
PY
```

Testing suggestions
- Add unit tests around small parsing helpers (hwmon normalization, lspci parsing, sensors output regex).
- Mock sysfs nodes under a test `tmpfs` to exercise hardware parsing without hardware.
- Add a small functional test launching `main.py` headless and verifying `get_volt_power_summary()` returns two strings.

Security and permissions
- Avoid running GUI as root. For `dmidecode`, prefer the minimal sudoers approach for only that binary if needed.
- Do not store credentials in code. The remote monitor module is a placeholder; if you extend it to run commands remotely, use paramiko or subprocess + ssh with care (keys, no passwords in code).

Developer/extension ideas
- Background sampler service for RAPL + GPU power and push updates to GUI.
- Add an options pane to let users map hwmon labels to VRM/RAM manually.
- Add a persisted config (JSON) to remember remote hosts and last-used IPs, or to set sampling interval.
- Add cross-platform fallbacks for Windows (WMI) and macOS (iStat / sysctl).

If you want me to append this to `README.md` or create a `docs/` folder with separate module pages, I can do that next.


---

# Project Documentation: Professional System Monitor (Updated)

## Overview
- **Purpose**: A desktop GUI app for local and remote system monitoring on Linux, with a modern UI using `customtkinter`.
- **Entry point**: `main.py`
- **Modules directory**: `modules/`
- **Features**:
  - Local info: CPU, Memory, GPU, Temperatures, Voltages/Power, Network, OS, Motherboard.
  - Stress test (local).
  - Remote monitoring over SSH via Fabric, aggregated into the same GUI.

## Architecture
- **GUI**: `main.py` defines `App` (a `ctk.CTk` window) with:
  - Left navigation buttons.
  - Large right output area (`tk.Text`) with color tags and JSON pretty-print.
  - Status/footer bars.
- **Data retrieval**: Each button triggers a module function and sends returned data to `App.write_output()` for display.
- **Remote monitor**:
  - A dialog collects Hostname, optional IP, and User.
  - Calls `modules.remote_monitor.query_remote(host, user, ip=...)`.
  - Returns a dict with OS/CPU/Mem/GPU/Temps/Motherboard collected over SSH.

## GUI Flow and Important Methods
- **`App.__init__()` in `main.py`**:
  - Builds the window layout, configures tags (`'key'`, `'good'`, `'bad'`, `'neutral'`, `'mono'`).
  - Creates buttons mapped to handlers:
    - `show_cpu_info()`, `show_memory_info()`, `show_gpu_info()`, `show_temps()`, `show_volt_power()`, `show_network_rates()`, `show_os_info()`, `show_motherboard()`, `run_stress()`, `show_remote_stub()`.
- **`write_output(text)` in `main.py`**:
  - Accepts dict/list/string/JSON string.
  - Pretty-prints dicts with per-key coloring and safely handles `None` values.
- **Remote dialog**: `show_remote_stub()` in `main.py`
  - Collects inputs.
  - On "Query" calls `remote_monitor.query_remote()` and displays the returned dict.

## Modules

### `modules/cpu_info.py`
- **Function**: `get_cpu_info() -> dict`
- **Behavior**:
  - If `py-cpuinfo` is available: detailed brand/arch/hz.
  - Always uses `psutil` for core/thread counts and `psutil.cpu_percent(interval=0.5)` for usage.
- **Returns**:
  - `{'brand', 'arch', 'hz', 'cores', 'threads', 'usage'}` plus `'error'` on exceptions.

### `modules/memory_info.py`
- **Function**: `get_memory_info() -> dict`
- **Behavior**:
  - `psutil.virtual_memory()` for total RAM.
  - Best-effort detection of RAM Type/Frequency/Channel via:
    - `dmidecode -t 17` (may require root).
    - Fallback to `lshw -class memory -short` (if installed).
  - Adds helpful messages if info is unavailable or requires `sudo`.
- **Returns**:
  - `{'Total (GB)', 'Type', 'Frequency', 'Channel'}`.

### `modules/gpu_info.py`
- **Function**: `get_gpu_info() -> dict`
- **Behavior**:
  - Prefers `nvidia-smi` for NVIDIA: name, memory, temperature.
  - Otherwise uses `lspci -mm` to identify GPU devices.
  - Attempts to read temperatures from `/sys/class/drm/.../hwmon/...`.
  - Vendor inference via PCI vendor files (NVIDIA/AMD/Intel) when possible.
  - Marks Intel memory as “Shared (system)”.
- **Returns**:
  - `{'Name', 'Vendor', 'Memory', 'Temperature'}`.

### `modules/temp_info.py`
- Comprehensive temperature utilities.
- **Key functions**:
  - `get_temperatures() -> dict`: Aggregates temps from:
    - HWMON (`/sys/class/hwmon`).
    - `sensors -A`.
    - CPU-specific temps (`_get_cpu_temperatures()`).
    - GPU-specific temps (`_get_gpu_temperatures()`; may call `nvidia-smi` and `gpu_info`).
  - `get_quick_summary() -> dict[str, Optional[float]]`:
    - Compact readings for GUI: `CPU Temperature (°C)`, `GPU Temperature (°C)`, `RAM Temperature (°C)`, `VRM Temperature (°C)`.
  - `get_all_hwmon_sensors() -> dict`: Diagnostics dump of all HWMON entries.
  - `get_temperature_summary() -> dict`: Max CPU/GPU temps, critical alerts, total sensors.
- **Notes**: Gracefully handles missing tools and sensors, tolerant parsing.

### `modules/volt_info.py`
- Real-time voltage and power info.
- **Key functions**:
  - `get_voltages() -> dict`: From HWMON inputs (`in*_input`), `sensors -A`, and tags CPU/GPU subsets.
  - `get_power() -> dict`:
    - Power from HWMON (`power*_input`).
    - Intel RAPL cumulative energy (`/sys/class/powercap/intel-rapl/.../energy_uj`).
    - NVIDIA GPU power via `nvidia-smi --query-gpu=index,power.draw`.
    - Computes “total” if watts are available.
  - `get_voltages_display() -> dict[str, list]` and `get_power_display() -> dict[str, list]`: Format for GUI.
  - `get_volt_power_panel() -> list` and `get_volt_power_summary() -> list`: Concise GUI lines.
- **Notes**: RAPL provides cumulative energy; not instantaneous power unless sampled over time.

### `modules/network.py`
- **Function**: `get_network_rates(interval=0.5) -> dict`
- **Behavior**:
  - Samples `psutil.net_io_counters()` before and after a sleep to compute RX/TX bytes per second.
- **Returns**:
  - `{'recv_bps', 'sent_bps'}`.

### `modules/os_info.py`
- **Function**: `get_os_info() -> dict`
- **Behavior**: Uses `platform` and `datetime` for timestamp, OS name, version, architecture.
- **Returns**:
  - `{'Time', 'OS Name', 'Version', 'Architecture'}`.

### `modules/motherboard_info.py`
- **Function**: `get_motherboard_info() -> dict`
- **Behavior**:
  - Reads `/sys/class/dmi/id/*` for board vendor/product/BIOS.
  - Best-effort chipset info from `lspci -mm` (bridge devices).
  - Falls back with a `note` if not available.
- **Returns**:
  - `{'manufacturer', 'product', 'bios_version', 'chipset'}` or `{'note': ...}`.

### `modules/stress_test.py`
- Referenced by `main.py` as `stress_test.run_stress_test(seconds)`.
- Runs a CPU workload for the specified duration (implementation not shown here; extend as needed).

### `modules/remote_monitor.py`
- Implements Fabric-based SSH collection to mirror local info categories.
- **Core function**: `query_remote(host, user, ip=None) -> dict`
  - Connects using `fabric.Connection(host=ip or host, user=user, connect_timeout=6)`.
  - Collects:
    - `OS Info`: Python `platform` on remote, fallback `uname`.
    - `CPU Info`: Parses `lscpu -J` or `lscpu`.
    - `Memory Info`: `free -b` for total.
    - `GPU Info`: `nvidia-smi` or `lspci -mm`.
    - `Temperatures`: `sensors -A` (CPU heuristic) and `nvidia-smi` (GPU).
    - `Motherboard`: `/sys/class/dmi/id/*`.
  - Returns:
    - `{'Host', 'User', 'OS Info', 'CPU Info', 'Memory Info', 'GPU Info', 'Temperatures', 'Motherboard'}`.
    - On failure: `{'error': 'SSH connection failed to ...: <reason>'}`.
- **Helper functions**:
  - `_run(conn, cmd, timeout=6)`: Safe command execution with timeouts.
  - `_parse_lscpu(text)`: JSON or plain-text parsing to brand/arch/cores/threads.
  - `_get_os_info`, `_get_cpu_info`, `_get_mem_info`, `_get_gpu_info`, `_get_temp_summary`, `_get_motherboard`.

## Used Libraries and What They Do

- **customtkinter**:
  - Modern themed widgets for Tkinter: `CTk`, `CTkFrame`, `CTkLabel`, `CTkButton`, `CTkScrollableFrame`, `CTkToplevel`.
  - Used in `main.py` to create a dark, clean GUI.

- **tkinter**:
  - Standard Python GUI toolkit.
  - Used for `tk.Text` output area and scrollbar in `main.py`.

  - Used to avoid blocking the GUI when running longer actions (stress test, network sampling).

- **psutil**:
  - Cross-platform system information (CPU usage, memory, network I/O).
  - Used in `cpu_info.py`, `memory_info.py` (total RAM), `network.py` (I/O counters).

- **py-cpuinfo** (`cpuinfo`):
  - Detailed CPU info including brand string, arch, frequencies.
  - Optional; code falls back to `platform` when unavailable.

- **nvidia-ml-py3** / `nvidia-smi`:
  - Provides NVIDIA GPU information. The project invokes the CLI `nvidia-smi` in several modules.

- **gputil**:
  - GPU utilities (not directly referenced in the current code paths, but available for extensions).

- **subprocess/shlex/re/os/glob** (standard library):
  - Execute system commands and parse output (`gpu_info.py`, `memory_info.py`, `motherboard_info.py`, `temp_info.py`, `volt_info.py`).
  - Traverse sysfs for sensors and PCI devices.

- **platform/datetime**:
  - OS info, machine architecture, and timestamp (`os_info.py`, `cpu_info.py`, `temp_info.py`, `volt_info.py`).

- **Fabric**:
  - SSH library built on `Paramiko`.
  - Used in `modules/remote_monitor.py` to connect and run remote commands to gather the same categories of information as local.

## Installation and Running
- **Dependencies**: `requirements.txt`
  - `customtkinter`, `psutil`, `py-cpuinfo`, `gputil`, `nvidia-ml-py3`, `fabric`
- **Install**:
```bash
python3 -m pip install -r requirements.txt
```
- **Run GUI**:
```bash
python3 main.py
```

## Remote Monitoring Requirements
- **SSH access** to remote host (keys or password; current GUI does not prompt for password).
- **Remote tools** (improves data):
  - `lscpu`, `free`, `sensors` (lm-sensors), `nvidia-smi`, `lspci`.
  - Read access to `/sys/class/dmi/id/*`.
- If missing, results will show `None` or omit certain fields gracefully.

## Error Handling and Resilience
- **Best-effort parsing** across all modules; exceptions are caught and fields may be `None` rather than failing the whole view.
- **Timeouts**:
  - Many subprocess and SSH commands include timeouts to avoid freezing the GUI.
- **Remote errors**:
  - On connection failure, `remote_monitor.query_remote()` returns an `error` entry that `write_output()` can display.

## Extensibility
- **Add new metrics**:
  - Create a new module in `modules/`, implement a `get_*()` function that returns a simple dict/list.
  - Add a button in `main.py` and a `show_*()` handler calling your function and passing to `write_output()`.
- **Remote parity**:
  - Mirror your local module’s logic with remote shell commands in `remote_monitor.py` to display equivalent remote info.

## Security Notes
- Avoid executing arbitrary commands. Current remote commands are fixed, short, and read-only.
- Prefer SSH keys over passwords. If you need password auth, extend the dialog to accept a password and pass:
  - `Connection(..., connect_kwargs={'password': '...'})`
- Never log secrets.

## Data Shapes Returned to GUI
- **CPU** (`cpu_info.get_cpu_info()`): `{'brand', 'arch', 'hz', 'cores', 'threads', 'usage'}`
- **Memory** (`memory_info.get_memory_info()`): `{'Total (GB)', 'Type', 'Frequency', 'Channel'}`
- **GPU** (`gpu_info.get_gpu_info()`): `{'Name', 'Vendor', 'Memory', 'Temperature'}`
- **Temps quick** (`temp_info.get_quick_summary()`): `{'CPU Temperature (°C)', 'GPU Temperature (°C)', 'RAM Temperature (°C)', 'VRM Temperature (°C)'}`
- **Volt/Power summary** (`volt_info.get_volt_power_summary()`): `['Voltages: ...', 'Power: ...']`
- **Network** (`network.get_network_rates()`): `{'recv_bps', 'sent_bps'}`
- **OS** (`os_info.get_os_info()`): `{'Time', 'OS Name', 'Version', 'Architecture'}`
- **Motherboard** (`motherboard_info.get_motherboard_info()`): `{'manufacturer', 'product', 'bios_version', 'chipset'} | {'note': ...}`
- **Remote** (`remote_monitor.query_remote()`): `{'Host', 'User', 'OS Info', 'CPU Info', 'Memory Info', 'GPU Info', 'Temperatures', 'Motherboard'} | {'error': ...}`
